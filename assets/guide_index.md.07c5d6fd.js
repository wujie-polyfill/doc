import{_ as e,c as i,o as l,a}from"./app.7c87279d.js";const _=JSON.parse('{"title":"wujie-polyfill","description":"","frontmatter":{"sidebarDepth":2},"headers":[{"level":2,"title":"WUJIE微前端框架","slug":"wujie微前端框架","link":"#wujie微前端框架","children":[]},{"level":2,"title":"WUJIE Polyfill","slug":"wujie-polyfill-1","link":"#wujie-polyfill-1","children":[{"level":3,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":3,"title":"接入方式","slug":"接入方式","link":"#接入方式","children":[]}]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[{"level":3,"title":"使用原则","slug":"使用原则","link":"#使用原则","children":[]}]}],"relativePath":"guide/index.md","lastUpdated":1692114728000}'),r={name:"guide/index.md"},t=a('<h1 id="wujie-polyfill" tabindex="-1">wujie-polyfill <a class="header-anchor" href="#wujie-polyfill" aria-hidden="true">#</a></h1><h2 id="wujie微前端框架" tabindex="-1">WUJIE微前端框架 <a class="header-anchor" href="#wujie微前端框架" aria-hidden="true">#</a></h2><p>微前端是一种前端架构的演进，旨在通过将大型单体前端应用程序拆分为多个独立的、可独立部署的小型前端应用程序来解决前端架构的问题。</p><p>WUJIE是一个开源的微前端框架，旨在提供一个可扩展的架构，以支持将大型前端应用程序拆分为多个独立的小型前端应用程序。WUJIE微前端框架采用插件形式，并提供了一系列配置，以便对WUJIE进行能力增强。</p><p>详细介绍以及文档详见 <a href="https://wujie-micro.github.io/doc/" target="_blank" rel="noreferrer">wujie</a></p><h2 id="wujie-polyfill-1" tabindex="-1">WUJIE Polyfill <a class="header-anchor" href="#wujie-polyfill-1" aria-hidden="true">#</a></h2><p>WUJIE Polyfill是一种通过插件增强的方式，去模拟原生HTML、CSS和JavaScript在wujie微前端框架中正常运行的第三方插件库。提供了丰富的插件种类，来修正wujie在各种场景中的表现，使WUJIE框架能够在更复杂的浏览器环境中运行。</p><h3 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-hidden="true">#</a></h3><ul><li>能力增强：通过插件形式，可以对wujie的能力进行增强，提高开发效率。</li><li>兼容性：对于许多浏览器不支持的功能，polyfill提供了解决方案，确保应用程序在更多的场景下正常工作。</li><li>灵活配置：可以根据项目需求，自定义polyfill的功能，灵活配置需要的功能。</li></ul><h3 id="接入方式" tabindex="-1">接入方式 <a class="header-anchor" href="#接入方式" aria-hidden="true">#</a></h3><p>目前只提供了npm的安装方式，具体方式可以前往<a href="./start.html">快速开始</a>查看。</p><h2 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-hidden="true">#</a></h2><p>在以下几种情况下可以尝试使用该polyfill：</p><ol><li>兼容性：不同的浏览器对新特性的支持程度不一致，wujie中使用到了诸多新特性进行框架实现，某些场景表现不一致</li><li>能力增强：wujie在框架设计时考虑的是大多数的业务场景，在实际业务对接中，子应用可能需要更强大的能力支持与主应用配合，进行业务交互逻辑的实现</li><li>错误修正：在某些场景下，子应用可以正常独立运行，但在微前端中受限于能力覆盖或方案实现短板，导致无法正常运行的。</li></ol><h3 id="使用原则" tabindex="-1">使用原则 <a class="header-anchor" href="#使用原则" aria-hidden="true">#</a></h3><p><strong>1. 不推荐全部引入</strong></p><p>由于某些插件是不符合常规的实现方案，但是能够修复某些场景问题而诞生的。全部引入可能会导致插件在某些场景下运作时，产生新的副作用，影响系统正常运行，按需引入更为合适。</p><p><strong>2. 根据具体场景使用</strong></p><p>某些插件是有一定的场景限制的，如<code>LocationReloadPlugin</code>, 就无法再ESM模式(vite)下, 很好的工作。根据自身的场景，选取对应的实现方式会更加合适。</p>',19),d=[t];function n(h,o,s,p,c,u){return l(),i("div",null,d)}const j=e(r,[["render",n]]);export{_ as __pageData,j as default};
